name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  TERRAFORM_VERSION: 1.5.0

jobs:
  deploy-backend:
    name: Deploy Backend Infrastructure and Application
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Terraform Init
      run: |
        cd terraform
        terraform init

    - name: Terraform Plan
      env:
        TF_VAR_database_password: ${{ secrets.DATABASE_PASSWORD }}
        TF_VAR_domain_name: ${{ secrets.DOMAIN_NAME }}
        TF_VAR_alarm_email: ${{ secrets.ALARM_EMAIL }}
      run: |
        cd terraform
        terraform plan -out=tfplan

    - name: Terraform Apply
      env:
        TF_VAR_database_password: ${{ secrets.DATABASE_PASSWORD }}
        TF_VAR_domain_name: ${{ secrets.DOMAIN_NAME }}
        TF_VAR_alarm_email: ${{ secrets.ALARM_EMAIL }}
      run: |
        cd terraform
        terraform apply tfplan

    - name: Get ECR Repository URL
      id: ecr-url
      run: |
        cd terraform
        ECR_URL=$(terraform output -raw ecr_repository_url)
        echo "ecr_url=$ECR_URL" >> $GITHUB_OUTPUT

    - name: Login to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.ecr-url.outputs.ecr_url }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        cd backend
        docker build -f Dockerfile.prod -t $ECR_REGISTRY:$IMAGE_TAG .
        docker tag $ECR_REGISTRY:$IMAGE_TAG $ECR_REGISTRY:latest
        docker push $ECR_REGISTRY:$IMAGE_TAG
        docker push $ECR_REGISTRY:latest

    - name: Update SSM Parameters
      env:
        SECRET_KEY: ${{ secrets.SECRET_KEY }}
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        BELVO_SECRET_ID: ${{ secrets.BELVO_SECRET_ID }}
        BELVO_SECRET_PASSWORD: ${{ secrets.BELVO_SECRET_PASSWORD }}
      run: |
        aws ssm put-parameter --name "/ai-finance-manager/secret-key" --value "$SECRET_KEY" --type "SecureString" --overwrite --region ${{ env.AWS_REGION }}
        aws ssm put-parameter --name "/ai-finance-manager/anthropic-api-key" --value "$ANTHROPIC_API_KEY" --type "SecureString" --overwrite --region ${{ env.AWS_REGION }}
        if [ -n "$BELVO_SECRET_ID" ]; then
          aws ssm put-parameter --name "/ai-finance-manager/belvo-secret-id" --value "$BELVO_SECRET_ID" --type "SecureString" --overwrite --region ${{ env.AWS_REGION }}
        fi
        if [ -n "$BELVO_SECRET_PASSWORD" ]; then
          aws ssm put-parameter --name "/ai-finance-manager/belvo-secret-password" --value "$BELVO_SECRET_PASSWORD" --type "SecureString" --overwrite --region ${{ env.AWS_REGION }}
        fi

    - name: Force ECS Service Update
      run: |
        cd terraform
        ECS_CLUSTER=$(terraform output -raw ecs_cluster_name)
        ECS_SERVICE=$(terraform output -raw ecs_service_name)
        aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_SERVICE --force-new-deployment --region ${{ env.AWS_REGION }}

    - name: Run database migrations
      run: |
        cd backend
        pip install uv
        uv sync
        uv run alembic upgrade head

  deploy-frontend:
    name: Deploy Frontend
    runs-on: ubuntu-latest
    environment: production
    needs: [deploy-backend]

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: finance-dashboard/package-lock.json

    - name: Install dependencies
      run: |
        cd finance-dashboard
        npm ci

    - name: Get backend URL from Terraform
      id: backend-url
      run: |
        cd terraform
        terraform init
        BACKEND_URL=$(terraform output -raw load_balancer_url)
        echo "backend_url=$BACKEND_URL" >> $GITHUB_OUTPUT

    - name: Build application
      env:
        VITE_API_BASE_URL: ${{ steps.backend-url.outputs.backend_url }}
        VITE_ANTHROPIC_API_KEY: ${{ secrets.VITE_ANTHROPIC_API_KEY }}
      run: |
        cd finance-dashboard
        npm run build
        npm run typecheck

    - name: Deploy to Netlify
      uses: nwtgck/actions-netlify@v3.0
      with:
        publish-dir: './finance-dashboard/dist'
        production-branch: main
        production-deploy: true
        github-token: ${{ secrets.GITHUB_TOKEN }}
        deploy-message: "Deploy from GitHub Actions - commit ${{ github.sha }}"
        enable-pull-request-comment: false
        enable-commit-comment: true
        overwrites-pull-request-comment: true
      env:
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
        NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

    - name: Run Lighthouse CI
      uses: treosh/lighthouse-ci-action@v12
      with:
        urls: |
          https://${{ secrets.NETLIFY_SITE_NAME }}.netlify.app
        uploadArtifacts: true
        temporaryPublicStorage: true

  notify-deployment:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-frontend]
    if: always()

    steps:
    - name: Deployment Success
      if: needs.deploy-backend.result == 'success' && needs.deploy-frontend.result == 'success'
      run: |
        echo "✅ Deployment successful!"
        echo "Backend and frontend deployed successfully"

    - name: Deployment Failed
      if: needs.deploy-backend.result == 'failure' || needs.deploy-frontend.result == 'failure'
      run: |
        echo "❌ Deployment failed!"
        echo "Backend result: ${{ needs.deploy-backend.result }}"
        echo "Frontend result: ${{ needs.deploy-frontend.result }}"
        exit 1