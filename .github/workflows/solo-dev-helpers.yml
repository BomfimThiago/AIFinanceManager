name: Solo Developer Helpers

on:
  pull_request:
    types: [opened, synchronize]
  workflow_dispatch:

jobs:
  pr-auto-assign:
    name: Auto-assign PR to Owner
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
    - name: Auto-assign PR
      uses: actions/github-script@v7
      with:
        script: |
          // Auto-assign the PR to the repository owner for solo development
          await github.rest.issues.addAssignees({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            assignees: [context.repo.owner]
          });
          
          console.log(`Auto-assigned PR #${context.issue.number} to ${context.repo.owner}`);

  pr-status-comment:
    name: PR Status Comment
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    needs: []
    
    steps:
    - name: Add helpful comment
      uses: actions/github-script@v7
      with:
        script: |
          const prNumber = context.issue.number;
          const prAuthor = context.payload.pull_request.user.login;
          const repoOwner = context.repo.owner;
          
          // Only add comment if PR author is the repo owner (solo dev)
          if (prAuthor === repoOwner) {
            const comment = `## 🤖 Solo Developer Assistant
            
            Hi @${prAuthor}! This PR is ready for your review.
            
            ### ✅ Next Steps (Solo Development)
            1. Wait for all automated checks to complete
            2. Review the changes (optional - you wrote them!)
            3. Approve this PR once checks are green
            4. Merge when ready
            
            ### 🔍 Automated Checks Running
            - Backend tests & linting
            - Frontend tests & linting  
            - Security & dependency checks
            - Code coverage analysis
            
            ### 💡 Quick Actions
            - Mark as ready for review when all checks pass
            - Self-approve (you're the maintainer!)
            - Merge using "Squash and merge" (recommended)
            
            ---
            *This comment was auto-generated for solo development workflow*`;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: comment
            });
          }

  check-completion-notifier:
    name: Notify When Checks Complete
    runs-on: ubuntu-latest
    needs: []
    
    steps:
    - name: Wait for required checks
      uses: actions/github-script@v7
      with:
        script: |
          const { owner, repo } = context.repo;
          const prNumber = context.issue.number;
          
          // Get the PR details
          const pr = await github.rest.pulls.get({
            owner,
            repo,
            pull_number: prNumber
          });
          
          // Get the latest commit SHA
          const commitSha = pr.data.head.sha;
          
          // Wait a bit for other checks to start
          await new Promise(resolve => setTimeout(resolve, 30000));
          
          // Get check runs for this commit
          const checkRuns = await github.rest.checks.listForRef({
            owner,
            repo,
            ref: commitSha
          });
          
          const requiredChecks = [
            'Backend Tests & Linting',
            'Frontend Tests & Linting',
            'Quality Gate'
          ];
          
          const completedChecks = checkRuns.data.check_runs.filter(check => 
            requiredChecks.includes(check.name) && 
            check.status === 'completed'
          );
          
          if (completedChecks.length === requiredChecks.length) {
            const allPassed = completedChecks.every(check => check.conclusion === 'success');
            
            let message;
            if (allPassed) {
              message = `## ✅ All Checks Passed!
              
              Great news! All automated checks have completed successfully.
              
              ### 🎉 You can now:
              1. **Approve this PR** (click the "Review changes" button)
              2. **Merge when ready** (use "Squash and merge")
              
              ### ✅ Completed Checks:
              ${completedChecks.map(check => `- ${check.name}: ✅ ${check.conclusion}`).join('\n')}
              
              The code is ready to be merged! 🚀`;
            } else {
              const failedChecks = completedChecks.filter(check => check.conclusion !== 'success');
              message = `## ❌ Some Checks Failed
              
              Some automated checks need attention before this PR can be merged.
              
              ### ❌ Failed Checks:
              ${failedChecks.map(check => `- ${check.name}: ❌ ${check.conclusion}`).join('\n')}
              
              ### ✅ Passed Checks:
              ${completedChecks.filter(check => check.conclusion === 'success').map(check => `- ${check.name}: ✅`).join('\n')}
              
              Please check the failed workflows for details and fix the issues.`;
            }
            
            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number: prNumber,
              body: message
            });
          }

  label-management:
    name: Auto-label PRs
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Auto-label based on changes
      uses: actions/github-script@v7
      with:
        script: |
          const { owner, repo } = context.repo;
          const prNumber = context.issue.number;
          
          // Get files changed in this PR
          const files = await github.rest.pulls.listFiles({
            owner,
            repo,
            pull_number: prNumber
          });
          
          const changedFiles = files.data.map(file => file.filename);
          const labels = [];
          
          // Determine labels based on changed files
          if (changedFiles.some(file => file.startsWith('backend/'))) {
            labels.push('backend');
          }
          
          if (changedFiles.some(file => file.startsWith('finance-dashboard/'))) {
            labels.push('frontend');
          }
          
          if (changedFiles.some(file => file.includes('test'))) {
            labels.push('tests');
          }
          
          if (changedFiles.some(file => file.includes('.github/'))) {
            labels.push('ci/cd');
          }
          
          if (changedFiles.some(file => file.includes('README') || file.includes('.md'))) {
            labels.push('documentation');
          }
          
          if (changedFiles.some(file => 
            file.includes('package.json') || 
            file.includes('uv.lock') || 
            file.includes('pyproject.toml')
          )) {
            labels.push('dependencies');
          }
          
          // Add size label based on changes
          const totalChanges = files.data.reduce((sum, file) => sum + file.changes, 0);
          if (totalChanges < 50) {
            labels.push('size/small');
          } else if (totalChanges < 200) {
            labels.push('size/medium');
          } else {
            labels.push('size/large');
          }
          
          // Add labels to PR
          if (labels.length > 0) {
            await github.rest.issues.addLabels({
              owner,
              repo,
              issue_number: prNumber,
              labels
            });
            
            console.log(`Added labels: ${labels.join(', ')}`);
          }