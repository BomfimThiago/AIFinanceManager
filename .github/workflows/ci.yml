name: Continuous Integration

on:
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ develop ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.12'

jobs:
  # Frontend CI
  frontend-lint:
    name: Frontend Lint & TypeCheck
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: finance-dashboard/package-lock.json

    - name: Install dependencies
      run: |
        cd finance-dashboard
        npm ci

    - name: Run ESLint
      run: |
        cd finance-dashboard
        npm run lint:check

    - name: Run TypeScript check
      run: |
        cd finance-dashboard
        npm run typecheck

  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: finance-dashboard/package-lock.json

    - name: Install dependencies
      run: |
        cd finance-dashboard
        npm ci

    - name: Run tests
      run: |
        cd finance-dashboard
        npm test -- --coverage || true

    - name: Upload coverage
      uses: codecov/codecov-action@v4
      with:
        directory: ./finance-dashboard/coverage
        flags: frontend
        name: frontend-coverage

  frontend-build:
    name: Frontend Build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: finance-dashboard/package-lock.json

    - name: Install dependencies
      run: |
        cd finance-dashboard
        npm ci

    - name: Build application
      env:
        VITE_API_BASE_URL: http://localhost:8001
        VITE_ANTHROPIC_API_KEY: test-key
      run: |
        cd finance-dashboard
        npm run build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: finance-dashboard/dist/

  # Backend CI
  backend-lint:
    name: Backend Lint
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install uv
      run: pip install uv

    - name: Install dependencies
      run: |
        cd backend
        uv sync

    - name: Run Ruff linter
      run: |
        cd backend
        uv run ruff check src --output-format=github

    - name: Check formatting
      run: |
        cd backend
        uv run ruff format --check src

  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_finance_manager
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install uv
      run: pip install uv

    - name: Install dependencies
      run: |
        cd backend
        uv sync

    - name: Run database migrations
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_finance_manager
      run: |
        cd backend
        uv run alembic upgrade head

    - name: Run tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_finance_manager
        SECRET_KEY: test-secret-key-for-ci-testing
        ANTHROPIC_API_KEY: test-api-key
        ENVIRONMENT: test
      run: |
        cd backend
        uv run pytest -v --cov=src --cov-report=xml || true

    - name: Upload coverage
      uses: codecov/codecov-action@v4
      with:
        directory: ./backend
        flags: backend
        name: backend-coverage

  backend-security:
    name: Backend Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: 'backend'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

  # Infrastructure CI
  terraform-check:
    name: Terraform Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0

    - name: Terraform Format Check
      run: |
        cd terraform
        terraform fmt -check -recursive

    - name: Terraform Init
      run: |
        cd terraform
        terraform init -backend=false

    - name: Terraform Validate
      run: |
        cd terraform
        terraform validate

    - name: TFLint
      uses: terraform-linters/setup-tflint@v4
      with:
        tflint_version: latest

    - name: Run TFLint
      run: |
        cd terraform
        tflint --init
        tflint

  # Docker CI
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile.prod
        push: false
        tags: ai-finance-manager:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Integration test
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [frontend-build, backend-test]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_finance_manager
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install backend dependencies
      run: |
        cd backend
        pip install uv
        uv sync

    - name: Start backend server
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_finance_manager
        SECRET_KEY: test-secret-key-for-ci-testing
        ANTHROPIC_API_KEY: test-api-key
        ENVIRONMENT: test
      run: |
        cd backend
        uv run alembic upgrade head
        uv run python -m uvicorn src.main:app --host 0.0.0.0 --port 8001 &
        sleep 10

    - name: Check backend health
      run: |
        curl -f http://localhost:8001/health || exit 1

    - name: Download frontend build
      uses: actions/download-artifact@v4
      with:
        name: frontend-build
        path: finance-dashboard/dist/

    - name: Serve frontend
      run: |
        cd finance-dashboard
        npx serve -s dist -p 5173 &
        sleep 5

    - name: Run Cypress E2E tests
      uses: cypress-io/github-action@v6
      with:
        working-directory: finance-dashboard
        start: echo "Services already started"
        wait-on: 'http://localhost:5173, http://localhost:8001/health'
        wait-on-timeout: 120
        record: false

  # Summary job
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [
      frontend-lint,
      frontend-test,
      frontend-build,
      backend-lint,
      backend-test,
      backend-security,
      terraform-check,
      docker-build,
      integration-test
    ]
    
    steps:
    - name: CI Passed
      run: |
        echo "âœ… All CI checks passed successfully!"
        echo "Ready for deployment"