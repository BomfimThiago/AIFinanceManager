name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  backend-tests:
    name: Backend Tests & Linting
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: finance_test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    defaults:
      run:
        working-directory: ./backend

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"

    - name: Install dependencies
      run: |
        uv sync --all-extras --dev

    - name: Set up test environment variables
      run: |
        cat > .env << EOF
        ENVIRONMENT=test
        DATABASE_URL=postgresql://postgres:postgres@localhost:5432/finance_test_db
        ANTHROPIC_API_KEY=test_key_for_ci
        CORS_ORIGINS=http://localhost:3000,http://localhost:5173
        SECRET_KEY=test_secret_key_for_ci_only
        JWT_SECRET_KEY=test_jwt_secret_for_ci_only
        DEBUG=false
        DOCS_URL=
        REDOC_URL=
        OPENAPI_URL=
        EOF

    - name: Run database migrations
      run: |
        uv run alembic upgrade head

    - name: Run linting
      run: |
        ./scripts/lint.sh --check

    - name: Run type checking
      run: |
        uv run python -m mypy src/ --ignore-missing-imports --no-strict-optional

    - name: Run tests
      run: |
        uv run python -m pytest tests/ -v --tb=short --maxfail=10
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/finance_test_db

    - name: Generate test report
      if: always()
      run: |
        uv run python -m pytest tests/ --tb=no -q --co -q | wc -l > test_count.txt
        echo "Total tests: $(cat test_count.txt)"

  frontend-tests:
    name: Frontend Tests & Linting
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./finance-dashboard

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: finance-dashboard/package-lock.json

    - name: Install dependencies
      run: npm ci

    - name: Run linting
      run: npm run lint

    - name: Run type checking
      run: npm run typecheck

    - name: Run tests
      run: npm test -- --passWithNoTests

    - name: Build application
      run: npm run build
      env:
        VITE_API_BASE_URL: http://localhost:8001

  security-checks:
    name: Security & Dependency Checks
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, security-checks]
    if: always()

    steps:
    - name: Check all jobs status
      run: |
        if [[ "${{ needs.backend-tests.result }}" != "success" ]]; then
          echo "❌ Backend tests failed"
          exit 1
        fi
        if [[ "${{ needs.frontend-tests.result }}" != "success" ]]; then
          echo "❌ Frontend tests failed"
          exit 1
        fi
        if [[ "${{ needs.security-checks.result }}" != "success" ]]; then
          echo "⚠️ Security checks failed or had issues"
          # Don't fail on security checks for now, just warn
        fi
        echo "✅ All quality checks passed!"

  build-and-test-integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    if: github.event_name == 'pull_request'

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: finance_integration_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: finance-dashboard/package-lock.json

    - name: Install uv
      uses: astral-sh/setup-uv@v3

    - name: Install backend dependencies
      run: |
        cd backend
        uv sync --all-extras --dev

    - name: Install frontend dependencies
      run: |
        cd finance-dashboard
        npm ci

    - name: Set up integration test environment
      run: |
        cd backend
        cat > .env << EOF
        ENVIRONMENT=test
        DATABASE_URL=postgresql://postgres:postgres@localhost:5432/finance_integration_db
        ANTHROPIC_API_KEY=test_key_for_integration
        CORS_ORIGINS=http://localhost:3000,http://localhost:5173
        SECRET_KEY=test_secret_key_for_integration
        JWT_SECRET_KEY=test_jwt_secret_for_integration
        DEBUG=false
        EOF

    - name: Run database migrations
      run: |
        cd backend
        uv run alembic upgrade head

    - name: Build frontend
      run: |
        cd finance-dashboard
        npm run build
      env:
        VITE_API_BASE_URL: http://localhost:8001

    - name: Start backend server
      run: |
        cd backend
        uv run python run.py &
        sleep 10
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/finance_integration_db

    - name: Run integration tests
      run: |
        cd backend
        # Run a subset of tests that verify API endpoints
        uv run python -m pytest tests/ -k "test_basic" --tb=short
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/finance_integration_db