"""
Unit tests for the insights repository module.

Tests the InsightRepository class methods for database operations
including CRUD operations and AI insight integration.
"""

import pytest
from unittest.mock import AsyncMock

from src.insights.models import InsightModel
from src.insights.repository import InsightRepository
from src.insights.schemas import InsightCreate, InsightUpdate, AIInsight
from src.shared.constants import InsightType


@pytest.mark.unit
@pytest.mark.insights
class TestInsightRepository:
    """Test cases for InsightRepository."""

    @pytest.fixture
    def mock_db_session(self):
        """Create a mock database session."""
        return AsyncMock()

    @pytest.fixture
    def insight_repository(self, mock_db_session):
        """Create an InsightRepository with mock database session."""
        return InsightRepository(mock_db_session)

    @pytest.fixture
    def sample_insight_model(self):
        """Create a sample InsightModel for testing."""
        return InsightModel(
            id=1,
            title="Budget Warning",
            message="You're approaching your budget limit",
            type=InsightType.WARNING.value,
            actionable="Reduce spending in entertainment category",
        )

    @pytest.fixture
    def sample_insight_create(self):
        """Create sample insight creation data."""
        return InsightCreate(
            title="New Insight",
            message="This is a new insight",
            type=InsightType.INFO,
            actionable="Take appropriate action",
        )

    @pytest.fixture
    def sample_ai_insight(self):
        """Create sample AI insight data."""
        return AIInsight(
            title="AI Generated",
            message="This insight was generated by AI",
            type=InsightType.SUCCESS,
            actionable="Continue current practices",
        )

    @pytest.mark.asyncio
    async def test_create_from_ai_insight(
        self, insight_repository: InsightRepository, mock_db_session, sample_ai_insight: AIInsight
    ):
        """Test creating insight from AI insight data."""
        # Mock database operations
        mock_db_session.add = AsyncMock()
        mock_db_session.commit = AsyncMock()
        mock_db_session.refresh = AsyncMock()
        
        created_insight = await insight_repository.create_from_ai_insight(sample_ai_insight)
        
        # Verify database operations were called
        mock_db_session.add.assert_called_once()
        mock_db_session.commit.assert_called_once()
        mock_db_session.refresh.assert_called_once()
        
        # Verify created insight properties
        assert created_insight.title == sample_ai_insight.title
        assert created_insight.message == sample_ai_insight.message
        assert created_insight.type == sample_ai_insight.type.value
        assert created_insight.actionable == sample_ai_insight.actionable

    @pytest.mark.asyncio
    async def test_create_multiple_from_ai_insights(
        self, insight_repository: InsightRepository, mock_db_session
    ):
        """Test creating multiple insights from AI insight data."""
        ai_insights = [
            AIInsight(
                title="First Insight",
                message="First message",
                type=InsightType.WARNING,
                actionable="First action",
            ),
            AIInsight(
                title="Second Insight", 
                message="Second message",
                type=InsightType.SUCCESS,
                actionable="Second action",
            ),
        ]
        
        # Mock database operations
        mock_db_session.add = AsyncMock()
        mock_db_session.commit = AsyncMock()
        mock_db_session.refresh = AsyncMock()
        
        created_insights = await insight_repository.create_multiple_from_ai_insights(ai_insights)
        
        # Verify database operations
        assert mock_db_session.add.call_count == 2
        mock_db_session.commit.assert_called_once()
        assert mock_db_session.refresh.call_count == 2
        
        # Verify created insights
        assert len(created_insights) == 2
        assert created_insights[0].title == "First Insight"
        assert created_insights[1].title == "Second Insight"

    @pytest.mark.asyncio
    async def test_delete_all(self, insight_repository: InsightRepository, mock_db_session):
        """Test deleting all insights."""
        # Mock delete result
        mock_result = AsyncMock()
        mock_result.rowcount = 5
        mock_db_session.execute.return_value = mock_result
        mock_db_session.commit = AsyncMock()
        
        deleted_count = await insight_repository.delete_all()
        
        # Verify database operations
        mock_db_session.execute.assert_called_once()
        mock_db_session.commit.assert_called_once()
        
        # Verify return value
        assert deleted_count == 5

    @pytest.mark.asyncio
    async def test_delete_all_no_records(self, insight_repository: InsightRepository, mock_db_session):
        """Test deleting all insights when no records exist."""
        # Mock delete result with no rows
        mock_result = AsyncMock()
        mock_result.rowcount = 0
        mock_db_session.execute.return_value = mock_result
        mock_db_session.commit = AsyncMock()
        
        deleted_count = await insight_repository.delete_all()
        
        assert deleted_count == 0

    @pytest.mark.asyncio
    async def test_get_by_type(self, insight_repository: InsightRepository, sample_insight_model: InsightModel):
        """Test getting insights by type."""
        # Mock the get_multi method from base repository
        insight_repository.get_multi = AsyncMock(return_value=([sample_insight_model], 1))
        
        insights = await insight_repository.get_by_type(InsightType.WARNING.value)
        
        # Verify get_multi was called with correct filters
        insight_repository.get_multi.assert_called_once_with(filters={"type": InsightType.WARNING.value})
        
        # Verify results
        assert len(insights) == 1
        assert insights[0].type == InsightType.WARNING.value

    @pytest.mark.asyncio
    async def test_get_by_type_no_results(self, insight_repository: InsightRepository):
        """Test getting insights by type with no results."""
        # Mock empty result
        insight_repository.get_multi = AsyncMock(return_value=([], 0))
        
        insights = await insight_repository.get_by_type(InsightType.SUCCESS.value)
        
        assert len(insights) == 0

    @pytest.mark.asyncio
    async def test_inherited_base_repository_methods(self, insight_repository: InsightRepository):
        """Test that InsightRepository inherits base repository methods."""
        # Test that repository has inherited methods
        assert hasattr(insight_repository, 'create')
        assert hasattr(insight_repository, 'get_by_id')
        assert hasattr(insight_repository, 'get_all')
        assert hasattr(insight_repository, 'update')
        assert hasattr(insight_repository, 'delete')
        assert hasattr(insight_repository, 'get_multi')

    @pytest.mark.asyncio
    async def test_create_insight_via_base_repository(
        self, insight_repository: InsightRepository, sample_insight_create: InsightCreate
    ):
        """Test creating insight using inherited create method."""
        # Mock the base repository create method
        mock_insight = InsightModel(
            id=1,
            title=sample_insight_create.title,
            message=sample_insight_create.message,
            type=sample_insight_create.type.value,
            actionable=sample_insight_create.actionable,
        )
        insight_repository.create = AsyncMock(return_value=mock_insight)
        
        created_insight = await insight_repository.create(sample_insight_create)
        
        # Verify create method was called
        insight_repository.create.assert_called_once_with(sample_insight_create)
        
        # Verify returned insight
        assert created_insight.title == sample_insight_create.title
        assert created_insight.message == sample_insight_create.message

    @pytest.mark.asyncio
    async def test_update_insight_via_base_repository(
        self, insight_repository: InsightRepository, sample_insight_model: InsightModel
    ):
        """Test updating insight using inherited update method."""
        update_data = InsightUpdate(
            title="Updated Title",
            actionable="Updated actionable advice",
        )
        
        # Mock the update method
        updated_model = InsightModel(
            id=sample_insight_model.id,
            title="Updated Title",
            message=sample_insight_model.message,
            type=sample_insight_model.type,
            actionable="Updated actionable advice",
        )
        insight_repository.update = AsyncMock(return_value=updated_model)
        
        updated_insight = await insight_repository.update(1, update_data)
        
        # Verify update method was called
        insight_repository.update.assert_called_once_with(1, update_data)
        
        # Verify updated insight
        assert updated_insight.title == "Updated Title"
        assert updated_insight.actionable == "Updated actionable advice"

    @pytest.mark.asyncio
    async def test_get_all_insights(self, insight_repository: InsightRepository):
        """Test getting all insights."""
        sample_insights = [
            InsightModel(
                id=1,
                title="First Insight",
                message="First message",
                type=InsightType.WARNING.value,
                actionable="First action",
            ),
            InsightModel(
                id=2,
                title="Second Insight",
                message="Second message",
                type=InsightType.SUCCESS.value,
                actionable="Second action",
            ),
        ]
        
        # Mock get_all method
        insight_repository.get_all = AsyncMock(return_value=sample_insights)
        
        insights = await insight_repository.get_all()
        
        # Verify method was called
        insight_repository.get_all.assert_called_once()
        
        # Verify results
        assert len(insights) == 2
        assert insights[0].title == "First Insight"
        assert insights[1].title == "Second Insight"

    @pytest.mark.asyncio
    async def test_delete_insight_by_id(self, insight_repository: InsightRepository):
        """Test deleting insight by ID."""
        # Mock delete method
        insight_repository.delete = AsyncMock(return_value=True)
        
        result = await insight_repository.delete(1)
        
        # Verify delete method was called
        insight_repository.delete.assert_called_once_with(1)
        
        # Verify result
        assert result is True

    @pytest.mark.asyncio
    async def test_insight_repository_model_property(self, insight_repository: InsightRepository):
        """Test that repository has correct model class."""
        assert insight_repository.model == InsightModel

    def test_insight_model_instantiation(self):
        """Test InsightModel can be instantiated directly."""
        insight = InsightModel(
            title="Direct Model",
            message="Created directly",
            type=InsightType.INFO.value,
            actionable=None,
        )
        
        assert insight.title == "Direct Model"
        assert insight.message == "Created directly"
        assert insight.type == InsightType.INFO.value
        assert insight.actionable is None