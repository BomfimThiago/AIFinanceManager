"""
Unit tests for the insights module basic functionality.

Tests basic model creation, schema validation, and enum values.
"""

import pytest
from datetime import datetime

from src.insights.models import InsightModel
from src.insights.schemas import Insight, InsightCreate, InsightUpdate, AIInsight, InsightSummary
from src.shared.constants import InsightType
from pydantic import ValidationError


@pytest.mark.unit
@pytest.mark.insights
class TestBasicInsights:
    """Test cases for basic insights functionality."""

    def test_insight_model_creation(self):
        """Test InsightModel creation with valid data."""
        insight = InsightModel(
            title="Budget Warning",
            message="You're approaching your monthly budget limit",
            type=InsightType.WARNING.value,
            actionable="Consider reducing discretionary spending",
        )
        
        assert insight.title == "Budget Warning"
        assert insight.message == "You're approaching your monthly budget limit"
        assert insight.type == InsightType.WARNING.value
        assert insight.actionable == "Consider reducing discretionary spending"

    def test_insight_model_with_none_actionable(self):
        """Test InsightModel with None actionable field."""
        insight = InsightModel(
            title="Monthly Summary",
            message="Your spending patterns this month",
            type=InsightType.INFO.value,
            actionable=None,
        )
        
        assert insight.title == "Monthly Summary"
        assert insight.actionable is None

    def test_insight_schema_validation(self):
        """Test InsightCreate schema validation."""
        valid_insight = InsightCreate(
            title="Savings Success",
            message="You've exceeded your savings goal!",
            type=InsightType.SUCCESS,
            actionable="Keep up the great work",
        )
        
        assert valid_insight.title == "Savings Success"
        assert valid_insight.type == InsightType.SUCCESS
        assert valid_insight.actionable == "Keep up the great work"

    def test_insight_schema_with_none_actionable(self):
        """Test InsightCreate with None actionable."""
        insight = InsightCreate(
            title="Information",
            message="General financial info",
            type=InsightType.INFO,
            actionable=None,
        )
        
        assert insight.actionable is None

    def test_insight_update_schema(self):
        """Test InsightUpdate schema with partial updates."""
        update_data = InsightUpdate(
            title="Updated Title",
            message=None,  # This field won't be updated
            type=InsightType.WARNING,  # This will be updated
        )
        
        assert update_data.title == "Updated Title"
        assert update_data.message is None
        assert update_data.type == InsightType.WARNING

    def test_ai_insight_schema(self):
        """Test AIInsight schema for compatibility."""
        ai_insight = AIInsight(
            title="AI Generated Insight",
            message="This insight was generated by AI",
            type=InsightType.INFO,
            actionable="Take this action",
        )
        
        assert ai_insight.title == "AI Generated Insight"
        assert ai_insight.message == "This insight was generated by AI"
        assert ai_insight.type == InsightType.INFO
        assert ai_insight.actionable == "Take this action"

    def test_insight_summary_schema(self):
        """Test InsightSummary schema."""
        sample_insights = [
            Insight(
                id=1,
                title="Warning",
                message="Warning message",
                type=InsightType.WARNING,
                actionable="Take action",
                created_at=datetime.now(),
                updated_at=datetime.now(),
            ),
            Insight(
                id=2,
                title="Success",
                message="Success message",
                type=InsightType.SUCCESS,
                actionable="Keep it up",
                created_at=datetime.now(),
                updated_at=datetime.now(),
            ),
        ]
        
        summary = InsightSummary(
            total_insights=2,
            warning_count=1,
            success_count=1,
            info_count=0,
            insights=sample_insights,
        )
        
        assert summary.total_insights == 2
        assert summary.warning_count == 1
        assert summary.success_count == 1
        assert summary.info_count == 0
        assert len(summary.insights) == 2

    def test_insight_type_enum_values(self):
        """Test InsightType enum values."""
        assert InsightType.WARNING.value == "warning"
        assert InsightType.SUCCESS.value == "success"
        assert InsightType.INFO.value == "info"

    def test_insight_model_repr(self):
        """Test InsightModel string representation."""
        insight = InsightModel(
            id=1,
            title="Test Insight",
            message="Test message",
            type=InsightType.INFO.value,
            actionable="Test action",
        )
        
        repr_str = repr(insight)
        assert "InsightModel" in repr_str
        assert "id=1" in repr_str
        assert "title='Test Insight'" in repr_str

    def test_insight_schema_validation_empty_strings(self):
        """Test that empty strings are allowed in insight schemas."""
        # Empty strings should be valid since there's no min_length constraint
        insight = InsightCreate(
            title="",  # Empty title is allowed
            message="",  # Empty message is allowed  
            type=InsightType.INFO,
        )
        
        assert insight.title == ""
        assert insight.message == ""

    def test_insight_type_validation(self):
        """Test that invalid insight types are rejected."""
        with pytest.raises(ValidationError):
            InsightCreate(
                title="Test",
                message="Test message",
                type="invalid_type",  # Invalid type
            )

    def test_insight_schema_from_model(self):
        """Test creating Insight schema from model."""
        model = InsightModel(
            id=1,
            title="Model Insight",
            message="From model",
            type=InsightType.SUCCESS.value,
            actionable="Do something",
            created_at=datetime.now(),
            updated_at=datetime.now(),
        )
        
        # Test that schema can be created from model attributes
        insight = Insight(
            id=model.id,
            title=model.title,
            message=model.message,
            type=model.type,
            actionable=model.actionable,
            created_at=model.created_at,
            updated_at=model.updated_at,
        )
        
        assert insight.id == model.id
        assert insight.title == model.title
        assert insight.type == model.type

    def test_insight_update_partial_validation(self):
        """Test that InsightUpdate allows all fields to be None."""
        update = InsightUpdate()  # All fields are optional
        
        assert update.title is None
        assert update.message is None
        assert update.type is None
        assert update.actionable is None

    def test_ai_insight_to_insight_create_conversion(self):
        """Test converting AIInsight to InsightCreate."""
        ai_insight = AIInsight(
            title="AI Title",
            message="AI Message",
            type=InsightType.WARNING,
            actionable="AI Action",
        )
        
        # Convert to InsightCreate (same fields)
        insight_create = InsightCreate(
            title=ai_insight.title,
            message=ai_insight.message,
            type=ai_insight.type,
            actionable=ai_insight.actionable,
        )
        
        assert insight_create.title == ai_insight.title
        assert insight_create.message == ai_insight.message
        assert insight_create.type == ai_insight.type
        assert insight_create.actionable == ai_insight.actionable